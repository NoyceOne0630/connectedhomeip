/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

/**
 *  @file
 *    This file contains definitions for accessors around clusters attributes.
 */

#include <app-common/zap-generated/attributes/Accessors.h>

#include <app-common/zap-generated/attribute-type.h>
#include <app-common/zap-generated/ids/Attributes.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app/InteractionModelEngine.h>
#include <app/InternalAttributeOperations.h>
#include <app/util/attribute-storage-null-handling.h>
#include <app/util/attribute-table.h>
#include <app/util/odd-sized-integers.h>
#include <lib/core/CHIPEncoding.h>
#include <lib/support/logging/CHIPLogging.h>

namespace {

std::optional<bool> GetMarkDirty(chip::app::MarkAttributeDirty markDirty)
{
    if (markDirty == chip::app::MarkAttributeDirty::kYes)
    {
        return std::make_optional(true);
    }
    if (markDirty == chip::app::MarkAttributeDirty::kNo)
    {
        return std::make_optional(false);
    }
    return std::nullopt;
}

} // namespace

namespace chip {
namespace app {
namespace Clusters {

namespace Identify {
namespace Attributes {

namespace IdentifyTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), value);
}

} // namespace IdentifyTime

namespace IdentifyType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Identify::IdentifyTypeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Identify::IdentifyTypeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Identify::IdentifyTypeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), value);
}

} // namespace IdentifyType

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Identify::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Identify

namespace Groups {
namespace Attributes {

namespace NameSupport {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Groups::NameSupportBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Groups::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Groups::NameSupportBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Groups::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Groups::NameSupportBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Groups::Id, Id), value);
}

} // namespace NameSupport

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Groups::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Groups::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Groups::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Groups::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Groups::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Groups::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Groups

namespace OnOff {
namespace Attributes {

namespace OnOff {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value);
}

} // namespace OnOff

namespace GlobalSceneControl {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value);
}

} // namespace GlobalSceneControl

namespace OnTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value);
}

} // namespace OnTime

namespace OffWaitTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value);
}

} // namespace OffWaitTime

namespace StartUpOnOff {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        DataModel::Nullable<chip::app::Clusters::OnOff::StartUpOnOffEnum> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::OnOff::StartUpOnOffEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::OnOff::StartUpOnOffEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::StartUpOnOffEnum> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::StartUpOnOffEnum> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StartUpOnOff

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OnOff::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace OnOff

namespace LevelControl {
namespace Attributes {

namespace CurrentLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace CurrentLevel

namespace RemainingTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace RemainingTime

namespace MinLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace MinLevel

namespace MaxLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace MaxLevel

namespace CurrentFrequency {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace CurrentFrequency

namespace MinFrequency {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace MinFrequency

namespace MaxFrequency {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace MaxFrequency

namespace Options {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::LevelControl::OptionsBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::LevelControl::OptionsBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::LevelControl::OptionsBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace Options

namespace OnOffTransitionTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace OnOffTransitionTime

namespace OnLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OnLevel

namespace OnTransitionTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OnTransitionTime

namespace OffTransitionTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OffTransitionTime

namespace DefaultMoveRate {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace DefaultMoveRate

namespace StartUpCurrentLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StartUpCurrentLevel

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LevelControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace LevelControl

namespace PulseWidthModulation {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PulseWidthModulation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PulseWidthModulation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PulseWidthModulation::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PulseWidthModulation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PulseWidthModulation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PulseWidthModulation::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace PulseWidthModulation

namespace Descriptor {
namespace Attributes {} // namespace Attributes
} // namespace Descriptor

namespace Binding {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Binding::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Binding::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Binding::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Binding::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Binding::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Binding::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Binding

namespace AccessControl {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::AccessControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AccessControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AccessControl::Id, Id), value);
}

} // namespace FeatureMap

} // namespace Attributes
} // namespace AccessControl

namespace Actions {
namespace Attributes {

namespace SetupURL {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Actions::Id, Id), value, 512);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Actions::Id, Id), value, 512, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Actions::Id, Id), value, 512);
}

} // namespace SetupURL

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Actions::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Actions::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Actions::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Actions::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Actions::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Actions::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Actions

namespace BasicInformation {
namespace Attributes {

namespace NodeLabel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value, 32);
}

} // namespace NodeLabel

namespace LocalConfigDisabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value);
}

} // namespace LocalConfigDisabled

namespace Reachable {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value);
}

} // namespace Reachable

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BasicInformation::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace BasicInformation

namespace OtaSoftwareUpdateProvider {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateProvider::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateProvider::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateProvider::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateProvider::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateProvider::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateProvider::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace OtaSoftwareUpdateProvider

namespace OtaSoftwareUpdateRequestor {
namespace Attributes {

namespace UpdatePossible {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value);
}

} // namespace UpdatePossible

namespace UpdateState {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::OtaSoftwareUpdateRequestor::UpdateStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::OtaSoftwareUpdateRequestor::UpdateStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::OtaSoftwareUpdateRequestor::UpdateStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value);
}

} // namespace UpdateState

namespace UpdateStateProgress {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace UpdateStateProgress

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OtaSoftwareUpdateRequestor::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace OtaSoftwareUpdateRequestor

namespace LocalizationConfiguration {
namespace Attributes {

namespace ActiveLocale {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LocalizationConfiguration::Id, Id), value, 35);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LocalizationConfiguration::Id, Id), value, 35,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LocalizationConfiguration::Id, Id), value, 35);
}

} // namespace ActiveLocale

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LocalizationConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LocalizationConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LocalizationConfiguration::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LocalizationConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LocalizationConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LocalizationConfiguration::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace LocalizationConfiguration

namespace TimeFormatLocalization {
namespace Attributes {

namespace HourFormat {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::HourFormatEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::HourFormatEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::HourFormatEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), value);
}

} // namespace HourFormat

namespace ActiveCalendarType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::CalendarTypeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::CalendarTypeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::CalendarTypeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), value);
}

} // namespace ActiveCalendarType

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeFormatLocalization::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace TimeFormatLocalization

namespace UnitLocalization {
namespace Attributes {

namespace TemperatureUnit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::UnitLocalization::TempUnitEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitLocalization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::UnitLocalization::TempUnitEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitLocalization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::UnitLocalization::TempUnitEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitLocalization::Id, Id), value);
}

} // namespace TemperatureUnit

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitLocalization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitLocalization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitLocalization::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitLocalization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitLocalization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitLocalization::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace UnitLocalization

namespace PowerSourceConfiguration {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSourceConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSourceConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSourceConfiguration::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSourceConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSourceConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSourceConfiguration::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace PowerSourceConfiguration

namespace PowerSource {
namespace Attributes {

namespace Status {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::PowerSource::PowerSourceStatusEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::PowerSourceStatusEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::PowerSourceStatusEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace Status

namespace Order {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace Order

namespace Description {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 60);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 60,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 60);
}

} // namespace Description

namespace WiredAssessedInputVoltage {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace WiredAssessedInputVoltage

namespace WiredAssessedInputFrequency {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace WiredAssessedInputFrequency

namespace WiredCurrentType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::PowerSource::WiredCurrentTypeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::WiredCurrentTypeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::WiredCurrentTypeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace WiredCurrentType

namespace WiredAssessedCurrent {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace WiredAssessedCurrent

namespace WiredNominalVoltage {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace WiredNominalVoltage

namespace WiredMaximumCurrent {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace WiredMaximumCurrent

namespace WiredPresent {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace WiredPresent

namespace BatVoltage {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace BatVoltage

namespace BatPercentRemaining {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace BatPercentRemaining

namespace BatTimeRemaining {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace BatTimeRemaining

namespace BatChargeLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::PowerSource::BatChargeLevelEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatChargeLevelEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatChargeLevelEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatChargeLevel

namespace BatReplacementNeeded {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatReplacementNeeded

namespace BatReplaceability {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::PowerSource::BatReplaceabilityEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatReplaceabilityEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatReplaceabilityEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatReplaceability

namespace BatPresent {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatPresent

namespace BatReplacementDescription {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 60);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 60,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 60);
}

} // namespace BatReplacementDescription

namespace BatCommonDesignation {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::PowerSource::BatCommonDesignationEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatCommonDesignationEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatCommonDesignationEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatCommonDesignation

namespace BatANSIDesignation {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 20);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 20,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 20);
}

} // namespace BatANSIDesignation

namespace BatIECDesignation {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 20);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 20,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, 20);
}

} // namespace BatIECDesignation

namespace BatApprovedChemistry {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::PowerSource::BatApprovedChemistryEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatApprovedChemistryEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatApprovedChemistryEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatApprovedChemistry

namespace BatCapacity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatCapacity

namespace BatQuantity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatQuantity

namespace BatChargeState {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::PowerSource::BatChargeStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatChargeStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::PowerSource::BatChargeStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatChargeState

namespace BatTimeToFullCharge {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace BatTimeToFullCharge

namespace BatFunctionalWhileCharging {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace BatFunctionalWhileCharging

namespace BatChargingCurrent {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace BatChargingCurrent

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerSource::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace PowerSource

namespace GeneralCommissioning {
namespace Attributes {

namespace Breadcrumb {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value);
}

} // namespace Breadcrumb

namespace TCAcceptedVersion {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value);
}

} // namespace TCAcceptedVersion

namespace TCMinRequiredVersion {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value);
}

} // namespace TCMinRequiredVersion

namespace TCAcknowledgements {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value);
}

} // namespace TCAcknowledgements

namespace TCAcknowledgementsRequired {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value);
}

} // namespace TCAcknowledgementsRequired

namespace TCUpdateDeadline {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value);
}

} // namespace TCUpdateDeadline

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralCommissioning::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace GeneralCommissioning

namespace NetworkCommissioning {
namespace Attributes {

namespace MaxNetworks {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

} // namespace MaxNetworks

namespace ScanMaxTimeSeconds {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

} // namespace ScanMaxTimeSeconds

namespace ConnectMaxTimeSeconds {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

} // namespace ConnectMaxTimeSeconds

namespace InterfaceEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

} // namespace InterfaceEnabled

namespace LastNetworkingStatus {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, DataModel::Nullable<chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatusEnum> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatusEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatusEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatusEnum> & value,
    MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatusEnum> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LastNetworkingStatus

namespace LastNetworkID {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::MutableByteSpan> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value, 32);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::ByteSpan> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::ByteSpan> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LastNetworkID

namespace LastConnectErrorValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LastConnectErrorValue

namespace SupportedThreadFeatures {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::NetworkCommissioning::ThreadCapabilitiesBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::NetworkCommissioning::ThreadCapabilitiesBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::NetworkCommissioning::ThreadCapabilitiesBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

} // namespace SupportedThreadFeatures

namespace ThreadVersion {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

} // namespace ThreadVersion

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NetworkCommissioning::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace NetworkCommissioning

namespace DiagnosticLogs {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DiagnosticLogs::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DiagnosticLogs::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DiagnosticLogs::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DiagnosticLogs::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DiagnosticLogs::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DiagnosticLogs::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace DiagnosticLogs

namespace GeneralDiagnostics {
namespace Attributes {

namespace TestEventTriggersEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralDiagnostics::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralDiagnostics::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::GeneralDiagnostics::Id, Id), value);
}

} // namespace TestEventTriggersEnabled

} // namespace Attributes
} // namespace GeneralDiagnostics

namespace SoftwareDiagnostics {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SoftwareDiagnostics::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SoftwareDiagnostics::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SoftwareDiagnostics::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace SoftwareDiagnostics

namespace ThreadNetworkDiagnostics {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDiagnostics::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDiagnostics::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDiagnostics::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDiagnostics::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDiagnostics::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDiagnostics::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ThreadNetworkDiagnostics

namespace WiFiNetworkDiagnostics {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkDiagnostics::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkDiagnostics::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkDiagnostics::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkDiagnostics::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkDiagnostics::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkDiagnostics::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace WiFiNetworkDiagnostics

namespace EthernetNetworkDiagnostics {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EthernetNetworkDiagnostics::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EthernetNetworkDiagnostics::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EthernetNetworkDiagnostics::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EthernetNetworkDiagnostics::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EthernetNetworkDiagnostics::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EthernetNetworkDiagnostics::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace EthernetNetworkDiagnostics

namespace TimeSynchronization {
namespace Attributes {

namespace TimeSource {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::TimeSynchronization::TimeSourceEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::TimeSynchronization::TimeSourceEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::TimeSynchronization::TimeSourceEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value);
}

} // namespace TimeSource

namespace TimeZoneDatabase {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::TimeSynchronization::TimeZoneDatabaseEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::TimeSynchronization::TimeZoneDatabaseEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::TimeSynchronization::TimeZoneDatabaseEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value);
}

} // namespace TimeZoneDatabase

namespace NTPServerAvailable {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value);
}

} // namespace NTPServerAvailable

namespace SupportsDNSResolve {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value);
}

} // namespace SupportsDNSResolve

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TimeSynchronization::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace TimeSynchronization

namespace BridgedDeviceBasicInformation {
namespace Attributes {

namespace VendorName {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

} // namespace VendorName

namespace VendorID {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::VendorId * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::VendorId value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::VendorId value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value);
}

} // namespace VendorID

namespace ProductName {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

} // namespace ProductName

namespace ProductID {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value);
}

} // namespace ProductID

namespace NodeLabel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

} // namespace NodeLabel

namespace HardwareVersion {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value);
}

} // namespace HardwareVersion

namespace HardwareVersionString {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 64);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 64,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 64);
}

} // namespace HardwareVersionString

namespace SoftwareVersion {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value);
}

} // namespace SoftwareVersion

namespace SoftwareVersionString {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 64);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 64,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 64);
}

} // namespace SoftwareVersionString

namespace ManufacturingDate {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 16);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 16,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 16);
}

} // namespace ManufacturingDate

namespace PartNumber {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

} // namespace PartNumber

namespace ProductURL {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 256);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 256,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 256);
}

} // namespace ProductURL

namespace ProductLabel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 64);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 64,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 64);
}

} // namespace ProductLabel

namespace SerialNumber {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

} // namespace SerialNumber

namespace Reachable {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value);
}

} // namespace Reachable

namespace UniqueID {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value, 32);
}

} // namespace UniqueID

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BridgedDeviceBasicInformation::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace BridgedDeviceBasicInformation

namespace Switch {
namespace Attributes {

namespace NumberOfPositions {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value);
}

} // namespace NumberOfPositions

namespace CurrentPosition {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value);
}

} // namespace CurrentPosition

namespace MultiPressMax {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value);
}

} // namespace MultiPressMax

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Switch::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Switch

namespace AdministratorCommissioning {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::AdministratorCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AdministratorCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AdministratorCommissioning::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::AdministratorCommissioning::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AdministratorCommissioning::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AdministratorCommissioning::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace AdministratorCommissioning

namespace OperationalCredentials {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalCredentials::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalCredentials::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalCredentials::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalCredentials::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalCredentials::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalCredentials::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace OperationalCredentials

namespace GroupKeyManagement {
namespace Attributes {} // namespace Attributes
} // namespace GroupKeyManagement

namespace FixedLabel {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FixedLabel::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FixedLabel::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FixedLabel::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FixedLabel::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FixedLabel::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FixedLabel::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace FixedLabel

namespace UserLabel {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UserLabel::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UserLabel::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UserLabel::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UserLabel::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UserLabel::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UserLabel::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace UserLabel

namespace ProxyConfiguration {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyConfiguration::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyConfiguration::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ProxyConfiguration

namespace ProxyDiscovery {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyDiscovery::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyDiscovery::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyDiscovery::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyDiscovery::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyDiscovery::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyDiscovery::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ProxyDiscovery

namespace ProxyValid {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyValid::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyValid::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyValid::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyValid::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyValid::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ProxyValid::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ProxyValid

namespace BooleanState {
namespace Attributes {

namespace StateValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanState::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanState::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanState::Id, Id), value);
}

} // namespace StateValue

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanState::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanState::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanState::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanState::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanState::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanState::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace BooleanState

namespace IcdManagement {
namespace Attributes {

namespace UserActiveModeTriggerHint {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::IcdManagement::UserActiveModeTriggerBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::IcdManagement::UserActiveModeTriggerBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::IcdManagement::UserActiveModeTriggerBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value);
}

} // namespace UserActiveModeTriggerHint

namespace UserActiveModeTriggerInstruction {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value, 128);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value, 128,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value, 128);
}

} // namespace UserActiveModeTriggerInstruction

namespace OperatingMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::IcdManagement::OperatingModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::IcdManagement::OperatingModeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::IcdManagement::OperatingModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value);
}

} // namespace OperatingMode

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IcdManagement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace IcdManagement

namespace Timer {
namespace Attributes {

namespace SetTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value);
}

} // namespace SetTime

namespace TimeRemaining {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value);
}

} // namespace TimeRemaining

namespace TimerState {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Timer::TimerStatusEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Timer::TimerStatusEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Timer::TimerStatusEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value);
}

} // namespace TimerState

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Timer::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Timer

namespace OvenCavityOperationalState {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OvenCavityOperationalState::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenCavityOperationalState::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenCavityOperationalState::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OvenCavityOperationalState::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenCavityOperationalState::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenCavityOperationalState::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace OvenCavityOperationalState

namespace OvenMode {
namespace Attributes {

namespace CurrentMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value);
}

} // namespace CurrentMode

namespace StartUpMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StartUpMode

namespace OnMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OnMode

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OvenMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace OvenMode

namespace LaundryDryerControls {
namespace Attributes {

namespace SelectedDrynessLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        DataModel::Nullable<chip::app::Clusters::LaundryDryerControls::DrynessLevelEnum> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::LaundryDryerControls::DrynessLevelEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::LaundryDryerControls::DrynessLevelEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::app::Clusters::LaundryDryerControls::DrynessLevelEnum> & value,
    MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::app::Clusters::LaundryDryerControls::DrynessLevelEnum> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace SelectedDrynessLevel

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryDryerControls::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace LaundryDryerControls

namespace ModeSelect {
namespace Attributes {

namespace Description {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value, 64);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value, 64,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value, 64);
}

} // namespace Description

namespace StandardNamespace {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StandardNamespace

namespace CurrentMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value);
}

} // namespace CurrentMode

namespace StartUpMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StartUpMode

namespace OnMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OnMode

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ModeSelect::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ModeSelect

namespace LaundryWasherMode {
namespace Attributes {

namespace StartUpMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StartUpMode

namespace OnMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OnMode

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace LaundryWasherMode

namespace RefrigeratorAndTemperatureControlledCabinetMode {
namespace Attributes {

namespace StartUpMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id),
                                 value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id), value,
        GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id),
        GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StartUpMode

namespace OnMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id),
                                 value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id), value,
        GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id),
        GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OnMode

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id),
                                 *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id), value,
        GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(
        ConcreteAttributePath(endpoint, Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace RefrigeratorAndTemperatureControlledCabinetMode

namespace LaundryWasherControls {
namespace Attributes {

namespace SpinSpeedCurrent {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace SpinSpeedCurrent

namespace NumberOfRinses {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::LaundryWasherControls::NumberOfRinsesEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::LaundryWasherControls::NumberOfRinsesEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::LaundryWasherControls::NumberOfRinsesEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), value);
}

} // namespace NumberOfRinses

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LaundryWasherControls::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace LaundryWasherControls

namespace RvcRunMode {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RvcRunMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RvcRunMode::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RvcRunMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace RvcRunMode

namespace RvcCleanMode {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RvcCleanMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RvcCleanMode::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RvcCleanMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace RvcCleanMode

namespace TemperatureControl {
namespace Attributes {

namespace TemperatureSetpoint {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value);
}

} // namespace TemperatureSetpoint

namespace MinTemperature {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value);
}

} // namespace MinTemperature

namespace MaxTemperature {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value);
}

} // namespace MaxTemperature

namespace Step {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value);
}

} // namespace Step

namespace SelectedTemperatureLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value);
}

} // namespace SelectedTemperatureLevel

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace TemperatureControl

namespace RefrigeratorAlarm {
namespace Attributes {

namespace Mask {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::RefrigeratorAlarm::AlarmBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::RefrigeratorAlarm::AlarmBitmap> value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::RefrigeratorAlarm::AlarmBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value);
}

} // namespace Mask

namespace State {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::RefrigeratorAlarm::AlarmBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::RefrigeratorAlarm::AlarmBitmap> value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::RefrigeratorAlarm::AlarmBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value);
}

} // namespace State

namespace Supported {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::RefrigeratorAlarm::AlarmBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::RefrigeratorAlarm::AlarmBitmap> value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::RefrigeratorAlarm::AlarmBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value);
}

} // namespace Supported

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RefrigeratorAlarm::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace RefrigeratorAlarm

namespace DishwasherMode {
namespace Attributes {

namespace StartUpMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StartUpMode

namespace OnMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OnMode

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace DishwasherMode

namespace AirQuality {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::AirQuality::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AirQuality::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AirQuality::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace AirQuality

namespace SmokeCoAlarm {
namespace Attributes {

namespace ExpressedState {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::ExpressedStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::ExpressedStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::ExpressedStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace ExpressedState

namespace SmokeState {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace SmokeState

namespace COState {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace COState

namespace BatteryAlert {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace BatteryAlert

namespace DeviceMuted {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::MuteStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::MuteStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::MuteStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace DeviceMuted

namespace TestInProgress {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace TestInProgress

namespace HardwareFaultAlert {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace HardwareFaultAlert

namespace EndOfServiceAlert {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::EndOfServiceEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::EndOfServiceEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::EndOfServiceEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace EndOfServiceAlert

namespace InterconnectSmokeAlarm {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace InterconnectSmokeAlarm

namespace InterconnectCOAlarm {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::AlarmStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace InterconnectCOAlarm

namespace ContaminationState {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::ContaminationStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::ContaminationStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::ContaminationStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace ContaminationState

namespace SmokeSensitivityLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::SensitivityEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::SensitivityEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::SmokeCoAlarm::SensitivityEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace SmokeSensitivityLevel

namespace ExpiryDate {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace ExpiryDate

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SmokeCoAlarm::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace SmokeCoAlarm

namespace DishwasherAlarm {
namespace Attributes {

namespace Mask {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value);
}

} // namespace Mask

namespace Latch {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value);
}

} // namespace Latch

namespace State {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value);
}

} // namespace State

namespace Supported {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::DishwasherAlarm::AlarmBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value);
}

} // namespace Supported

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DishwasherAlarm::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace DishwasherAlarm

namespace MicrowaveOvenMode {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MicrowaveOvenMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MicrowaveOvenMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MicrowaveOvenMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace MicrowaveOvenMode

namespace MicrowaveOvenControl {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MicrowaveOvenControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MicrowaveOvenControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MicrowaveOvenControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace MicrowaveOvenControl

namespace OperationalState {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalState::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalState::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalState::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalState::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalState::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OperationalState::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace OperationalState

namespace RvcOperationalState {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RvcOperationalState::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RvcOperationalState::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RvcOperationalState::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RvcOperationalState::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RvcOperationalState::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RvcOperationalState::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace RvcOperationalState

namespace ScenesManagement {
namespace Attributes {

namespace LastConfiguredBy {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::NodeId> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::NodeId value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::NodeId value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::NodeId> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::NodeId> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LastConfiguredBy

namespace SceneTableSize {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), value);
}

} // namespace SceneTableSize

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ScenesManagement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ScenesManagement

namespace HepaFilterMonitoring {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::HepaFilterMonitoring::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::HepaFilterMonitoring::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::HepaFilterMonitoring::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace HepaFilterMonitoring

namespace ActivatedCarbonFilterMonitoring {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ActivatedCarbonFilterMonitoring::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ActivatedCarbonFilterMonitoring::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ActivatedCarbonFilterMonitoring::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ActivatedCarbonFilterMonitoring

namespace BooleanStateConfiguration {
namespace Attributes {

namespace SupportedSensitivityLevels {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value);
}

} // namespace SupportedSensitivityLevels

namespace DefaultSensitivityLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value);
}

} // namespace DefaultSensitivityLevel

namespace AlarmsActive {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value);
}

} // namespace AlarmsActive

namespace AlarmsSuppressed {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value);
}

} // namespace AlarmsSuppressed

namespace AlarmsEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value);
}

} // namespace AlarmsEnabled

namespace AlarmsSupported {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::AlarmModeBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value);
}

} // namespace AlarmsSupported

namespace SensorFault {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::SensorFaultBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::SensorFaultBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BooleanStateConfiguration::SensorFaultBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value);
}

} // namespace SensorFault

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BooleanStateConfiguration::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace BooleanStateConfiguration

namespace ValveConfigurationAndControl {
namespace Attributes {

namespace OpenDuration {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OpenDuration

namespace DefaultOpenDuration {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace DefaultOpenDuration

namespace AutoCloseTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace AutoCloseTime

namespace CurrentState {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, DataModel::Nullable<chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum> & value,
    MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace CurrentState

namespace TargetState {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, DataModel::Nullable<chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum> & value,
    MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::app::Clusters::ValveConfigurationAndControl::ValveStateEnum> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace TargetState

namespace CurrentLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::Percent> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace CurrentLevel

namespace TargetLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::Percent> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace TargetLevel

namespace DefaultOpenLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::Percent * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

} // namespace DefaultOpenLevel

namespace ValveFault {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ValveConfigurationAndControl::ValveFaultBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ValveConfigurationAndControl::ValveFaultBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ValveConfigurationAndControl::ValveFaultBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

} // namespace ValveFault

namespace LevelStep {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

} // namespace LevelStep

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ValveConfigurationAndControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ValveConfigurationAndControl

namespace ElectricalPowerMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ElectricalPowerMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ElectricalPowerMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ElectricalPowerMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ElectricalPowerMeasurement

namespace ElectricalEnergyMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ElectricalEnergyMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ElectricalEnergyMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ElectricalEnergyMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ElectricalEnergyMeasurement

namespace WaterHeaterManagement {
namespace Attributes {} // namespace Attributes
} // namespace WaterHeaterManagement

namespace DemandResponseLoadControl {
namespace Attributes {

namespace NumberOfLoadControlPrograms {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value);
}

} // namespace NumberOfLoadControlPrograms

namespace NumberOfEventsPerProgram {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value);
}

} // namespace NumberOfEventsPerProgram

namespace NumberOfTransitions {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value);
}

} // namespace NumberOfTransitions

namespace DefaultRandomStart {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value);
}

} // namespace DefaultRandomStart

namespace DefaultRandomDuration {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value);
}

} // namespace DefaultRandomDuration

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DemandResponseLoadControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace DemandResponseLoadControl

namespace Messages {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Messages::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Messages::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Messages::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Messages::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Messages::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Messages::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Messages

namespace DeviceEnergyManagement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DeviceEnergyManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DeviceEnergyManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DeviceEnergyManagement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace DeviceEnergyManagement

namespace EnergyEvse {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyEvse::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyEvse::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyEvse::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace EnergyEvse

namespace EnergyPreference {
namespace Attributes {

namespace CurrentEnergyBalance {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), value);
}

} // namespace CurrentEnergyBalance

namespace CurrentLowPowerModeSensitivity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), value);
}

} // namespace CurrentLowPowerModeSensitivity

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyPreference::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace EnergyPreference

namespace PowerTopology {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PowerTopology::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerTopology::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PowerTopology::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace PowerTopology

namespace EnergyEvseMode {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyEvseMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyEvseMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EnergyEvseMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace EnergyEvseMode

namespace WaterHeaterMode {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WaterHeaterMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WaterHeaterMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WaterHeaterMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace WaterHeaterMode

namespace DeviceEnergyManagementMode {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DeviceEnergyManagementMode::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DeviceEnergyManagementMode::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DeviceEnergyManagementMode::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace DeviceEnergyManagementMode

namespace DoorLock {
namespace Attributes {

namespace LockState {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockState> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::DoorLock::DlLockState value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::DoorLock::DlLockState value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockState> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockState> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LockState

namespace LockType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::DoorLock::DlLockType * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::DoorLock::DlLockType value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::DoorLock::DlLockType value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace LockType

namespace ActuatorEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace ActuatorEnabled

namespace DoorState {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        DataModel::Nullable<chip::app::Clusters::DoorLock::DoorStateEnum> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::DoorLock::DoorStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::DoorLock::DoorStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorStateEnum> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorStateEnum> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace DoorState

namespace DoorOpenEvents {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace DoorOpenEvents

namespace DoorClosedEvents {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace DoorClosedEvents

namespace OpenPeriod {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace OpenPeriod

namespace NumberOfTotalUsersSupported {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace NumberOfTotalUsersSupported

namespace NumberOfPINUsersSupported {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace NumberOfPINUsersSupported

namespace NumberOfRFIDUsersSupported {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace NumberOfRFIDUsersSupported

namespace NumberOfWeekDaySchedulesSupportedPerUser {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace NumberOfWeekDaySchedulesSupportedPerUser

namespace NumberOfYearDaySchedulesSupportedPerUser {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace NumberOfYearDaySchedulesSupportedPerUser

namespace NumberOfHolidaySchedulesSupported {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace NumberOfHolidaySchedulesSupported

namespace MaxPINCodeLength {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace MaxPINCodeLength

namespace MinPINCodeLength {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace MinPINCodeLength

namespace MaxRFIDCodeLength {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace MaxRFIDCodeLength

namespace MinRFIDCodeLength {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace MinRFIDCodeLength

namespace CredentialRulesSupport {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlCredentialRuleMask> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::DoorLock::DlCredentialRuleMask> value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlCredentialRuleMask> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace CredentialRulesSupport

namespace NumberOfCredentialsSupportedPerUser {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace NumberOfCredentialsSupportedPerUser

namespace Language {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, 3);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, 3, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, 3);
}

} // namespace Language

namespace LEDSettings {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace LEDSettings

namespace AutoRelockTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace AutoRelockTime

namespace SoundVolume {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace SoundVolume

namespace OperatingMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::DoorLock::OperatingModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::DoorLock::OperatingModeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::DoorLock::OperatingModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace OperatingMode

namespace SupportedOperatingModes {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlSupportedOperatingModes> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlSupportedOperatingModes> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlSupportedOperatingModes> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace SupportedOperatingModes

namespace DefaultConfigurationRegister {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlDefaultConfigurationRegister> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlDefaultConfigurationRegister> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlDefaultConfigurationRegister> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace DefaultConfigurationRegister

namespace EnableLocalProgramming {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace EnableLocalProgramming

namespace EnableOneTouchLocking {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace EnableOneTouchLocking

namespace EnableInsideStatusLED {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace EnableInsideStatusLED

namespace EnablePrivacyModeButton {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace EnablePrivacyModeButton

namespace LocalProgrammingFeatures {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlLocalProgrammingFeatures> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlLocalProgrammingFeatures> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::DoorLock::DlLocalProgrammingFeatures> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace LocalProgrammingFeatures

namespace WrongCodeEntryLimit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace WrongCodeEntryLimit

namespace UserCodeTemporaryDisableTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace UserCodeTemporaryDisableTime

namespace SendPINOverTheAir {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace SendPINOverTheAir

namespace RequirePINforRemoteOperation {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace RequirePINforRemoteOperation

namespace ExpiringUserTimeout {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace ExpiringUserTimeout

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::DoorLock::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace DoorLock

namespace WindowCovering {
namespace Attributes {

namespace Type {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::WindowCovering::Type * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::WindowCovering::Type value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::WindowCovering::Type value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace Type

namespace PhysicalClosedLimitLift {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace PhysicalClosedLimitLift

namespace PhysicalClosedLimitTilt {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace PhysicalClosedLimitTilt

namespace CurrentPositionLift {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace CurrentPositionLift

namespace CurrentPositionTilt {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace CurrentPositionTilt

namespace NumberOfActuationsLift {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace NumberOfActuationsLift

namespace NumberOfActuationsTilt {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace NumberOfActuationsTilt

namespace ConfigStatus {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::WindowCovering::ConfigStatus> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::WindowCovering::ConfigStatus> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::WindowCovering::ConfigStatus> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace ConfigStatus

namespace CurrentPositionLiftPercentage {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::Percent> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace CurrentPositionLiftPercentage

namespace CurrentPositionTiltPercentage {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::Percent> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace CurrentPositionTiltPercentage

namespace OperationalStatus {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::WindowCovering::OperationalStatus> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::WindowCovering::OperationalStatus> value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::WindowCovering::OperationalStatus> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace OperationalStatus

namespace TargetPositionLiftPercent100ths {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::Percent100ths> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent100ths value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent100ths value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace TargetPositionLiftPercent100ths

namespace TargetPositionTiltPercent100ths {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::Percent100ths> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent100ths value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent100ths value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace TargetPositionTiltPercent100ths

namespace EndProductType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::WindowCovering::EndProductType * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::WindowCovering::EndProductType value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::WindowCovering::EndProductType value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace EndProductType

namespace CurrentPositionLiftPercent100ths {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::Percent100ths> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent100ths value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent100ths value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace CurrentPositionLiftPercent100ths

namespace CurrentPositionTiltPercent100ths {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::Percent100ths> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent100ths value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent100ths value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace CurrentPositionTiltPercent100ths

namespace InstalledOpenLimitLift {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace InstalledOpenLimitLift

namespace InstalledClosedLimitLift {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace InstalledClosedLimitLift

namespace InstalledOpenLimitTilt {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace InstalledOpenLimitTilt

namespace InstalledClosedLimitTilt {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace InstalledClosedLimitTilt

namespace Mode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::BitMask<chip::app::Clusters::WindowCovering::Mode> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::WindowCovering::Mode> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::WindowCovering::Mode> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace Mode

namespace SafetyStatus {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::WindowCovering::SafetyStatus> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::WindowCovering::SafetyStatus> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::WindowCovering::SafetyStatus> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace SafetyStatus

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WindowCovering::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace WindowCovering

namespace ServiceArea {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ServiceArea::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ServiceArea::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ServiceArea::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ServiceArea

namespace PumpConfigurationAndControl {
namespace Attributes {

namespace MaxPressure {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxPressure

namespace MaxSpeed {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxSpeed

namespace MaxFlow {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxFlow

namespace MinConstPressure {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinConstPressure

namespace MaxConstPressure {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxConstPressure

namespace MinCompPressure {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinCompPressure

namespace MaxCompPressure {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxCompPressure

namespace MinConstSpeed {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinConstSpeed

namespace MaxConstSpeed {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxConstSpeed

namespace MinConstFlow {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinConstFlow

namespace MaxConstFlow {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxConstFlow

namespace MinConstTemp {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinConstTemp

namespace MaxConstTemp {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxConstTemp

namespace PumpStatus {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::PumpConfigurationAndControl::PumpStatusBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::PumpConfigurationAndControl::PumpStatusBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::PumpConfigurationAndControl::PumpStatusBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

} // namespace PumpStatus

namespace EffectiveOperationMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

} // namespace EffectiveOperationMode

namespace EffectiveControlMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

} // namespace EffectiveControlMode

namespace Capacity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Capacity

namespace Speed {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Speed

namespace LifetimeRunningHours {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LifetimeRunningHours

namespace Power {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Power

namespace LifetimeEnergyConsumed {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LifetimeEnergyConsumed

namespace OperationMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

} // namespace OperationMode

namespace ControlMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

} // namespace ControlMode

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PumpConfigurationAndControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace PumpConfigurationAndControl

namespace Thermostat {
namespace Attributes {

namespace LocalTemperature {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LocalTemperature

namespace OutdoorTemperature {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OutdoorTemperature

namespace Occupancy {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::OccupancyBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Thermostat::OccupancyBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Thermostat::OccupancyBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace Occupancy

namespace AbsMinHeatSetpointLimit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace AbsMinHeatSetpointLimit

namespace AbsMaxHeatSetpointLimit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace AbsMaxHeatSetpointLimit

namespace AbsMinCoolSetpointLimit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace AbsMinCoolSetpointLimit

namespace AbsMaxCoolSetpointLimit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace AbsMaxCoolSetpointLimit

namespace PICoolingDemand {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace PICoolingDemand

namespace PIHeatingDemand {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace PIHeatingDemand

namespace HVACSystemTypeConfiguration {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::HVACSystemTypeBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Thermostat::HVACSystemTypeBitmap> value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::HVACSystemTypeBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace HVACSystemTypeConfiguration

namespace LocalTemperatureCalibration {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace LocalTemperatureCalibration

namespace OccupiedCoolingSetpoint {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace OccupiedCoolingSetpoint

namespace OccupiedHeatingSetpoint {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace OccupiedHeatingSetpoint

namespace UnoccupiedCoolingSetpoint {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace UnoccupiedCoolingSetpoint

namespace UnoccupiedHeatingSetpoint {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace UnoccupiedHeatingSetpoint

namespace MinHeatSetpointLimit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace MinHeatSetpointLimit

namespace MaxHeatSetpointLimit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace MaxHeatSetpointLimit

namespace MinCoolSetpointLimit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace MinCoolSetpointLimit

namespace MaxCoolSetpointLimit {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace MaxCoolSetpointLimit

namespace MinSetpointDeadBand {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace MinSetpointDeadBand

namespace RemoteSensing {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::RemoteSensingBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Thermostat::RemoteSensingBitmap> value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::RemoteSensingBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace RemoteSensing

namespace ControlSequenceOfOperation {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::Thermostat::ControlSequenceOfOperationEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ControlSequenceOfOperationEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ControlSequenceOfOperationEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ControlSequenceOfOperation

namespace SystemMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::SystemModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::SystemModeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::SystemModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace SystemMode

namespace ThermostatRunningMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::ThermostatRunningModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ThermostatRunningModeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ThermostatRunningModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ThermostatRunningMode

namespace StartOfWeek {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::StartOfWeekEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::StartOfWeekEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::StartOfWeekEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace StartOfWeek

namespace NumberOfWeeklyTransitions {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace NumberOfWeeklyTransitions

namespace NumberOfDailyTransitions {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace NumberOfDailyTransitions

namespace TemperatureSetpointHold {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::TemperatureSetpointHoldEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::TemperatureSetpointHoldEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::TemperatureSetpointHoldEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace TemperatureSetpointHold

namespace TemperatureSetpointHoldDuration {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace TemperatureSetpointHoldDuration

namespace ThermostatProgrammingOperationMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::ProgrammingOperationModeBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::ProgrammingOperationModeBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::ProgrammingOperationModeBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ThermostatProgrammingOperationMode

namespace ThermostatRunningState {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::RelayStateBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Thermostat::RelayStateBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Thermostat::RelayStateBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ThermostatRunningState

namespace SetpointChangeSource {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::SetpointChangeSourceEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::SetpointChangeSourceEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::SetpointChangeSourceEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace SetpointChangeSource

namespace SetpointChangeAmount {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace SetpointChangeAmount

namespace SetpointChangeSourceTimestamp {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace SetpointChangeSourceTimestamp

namespace OccupiedSetback {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OccupiedSetback

namespace OccupiedSetbackMin {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OccupiedSetbackMin

namespace OccupiedSetbackMax {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace OccupiedSetbackMax

namespace UnoccupiedSetback {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace UnoccupiedSetback

namespace UnoccupiedSetbackMin {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace UnoccupiedSetbackMin

namespace UnoccupiedSetbackMax {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace UnoccupiedSetbackMax

namespace EmergencyHeatDelta {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace EmergencyHeatDelta

namespace ACType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::ACTypeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACTypeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACTypeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ACType

namespace ACCapacity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ACCapacity

namespace ACRefrigerantType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::ACRefrigerantTypeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACRefrigerantTypeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACRefrigerantTypeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ACRefrigerantType

namespace ACCompressorType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::ACCompressorTypeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACCompressorTypeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACCompressorTypeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ACCompressorType

namespace ACErrorCode {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::ACErrorCodeBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::Thermostat::ACErrorCodeBitmap> value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::Thermostat::ACErrorCodeBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ACErrorCode

namespace ACLouverPosition {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::ACLouverPositionEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACLouverPositionEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACLouverPositionEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ACLouverPosition

namespace ACCoilTemperature {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace ACCoilTemperature

namespace ACCapacityformat {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Thermostat::ACCapacityFormatEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACCapacityFormatEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Thermostat::ACCapacityFormatEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ACCapacityformat

namespace NumberOfPresets {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace NumberOfPresets

namespace NumberOfSchedules {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace NumberOfSchedules

namespace NumberOfScheduleTransitions {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace NumberOfScheduleTransitions

namespace NumberOfScheduleTransitionPerDay {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NumberOfScheduleTransitionPerDay

namespace ActivePresetHandle {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::MutableByteSpan> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, 16);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, 16,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, 16);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::ByteSpan> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::ByteSpan> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace ActivePresetHandle

namespace ActiveScheduleHandle {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::MutableByteSpan> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, 16);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, 16,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, 16);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::ByteSpan> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::ByteSpan> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace ActiveScheduleHandle

namespace SetpointHoldExpiryTimestamp {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace SetpointHoldExpiryTimestamp

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Thermostat::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Thermostat

namespace FanControl {
namespace Attributes {

namespace FanMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::FanControl::FanModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::FanControl::FanModeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::FanControl::FanModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace FanMode

namespace FanModeSequence {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::FanControl::FanModeSequenceEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::FanControl::FanModeSequenceEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::FanControl::FanModeSequenceEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace FanModeSequence

namespace PercentSetting {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::Percent> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace PercentSetting

namespace PercentCurrent {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::Percent * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::Percent value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace PercentCurrent

namespace SpeedMax {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace SpeedMax

namespace SpeedSetting {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace SpeedSetting

namespace SpeedCurrent {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace SpeedCurrent

namespace RockSupport {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::RockBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::RockBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::RockBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace RockSupport

namespace RockSetting {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::RockBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::RockBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::RockBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace RockSetting

namespace WindSupport {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::WindBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::WindBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::WindBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace WindSupport

namespace WindSetting {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::WindBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::WindBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::FanControl::WindBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace WindSetting

namespace AirflowDirection {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::FanControl::AirflowDirectionEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::FanControl::AirflowDirectionEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::FanControl::AirflowDirectionEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace AirflowDirection

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FanControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace FanControl

namespace ThermostatUserInterfaceConfiguration {
namespace Attributes {

namespace TemperatureDisplayMode {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, chip::app::Clusters::ThermostatUserInterfaceConfiguration::TemperatureDisplayModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::ThermostatUserInterfaceConfiguration::TemperatureDisplayModeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::ThermostatUserInterfaceConfiguration::TemperatureDisplayModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value);
}

} // namespace TemperatureDisplayMode

namespace KeypadLockout {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::ThermostatUserInterfaceConfiguration::KeypadLockoutEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::ThermostatUserInterfaceConfiguration::KeypadLockoutEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::ThermostatUserInterfaceConfiguration::KeypadLockoutEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value);
}

} // namespace KeypadLockout

namespace ScheduleProgrammingVisibility {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, chip::app::Clusters::ThermostatUserInterfaceConfiguration::ScheduleProgrammingVisibilityEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::app::Clusters::ThermostatUserInterfaceConfiguration::ScheduleProgrammingVisibilityEnum value,
    MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::app::Clusters::ThermostatUserInterfaceConfiguration::ScheduleProgrammingVisibilityEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value);
}

} // namespace ScheduleProgrammingVisibility

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThermostatUserInterfaceConfiguration::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ThermostatUserInterfaceConfiguration

namespace ColorControl {
namespace Attributes {

namespace CurrentHue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace CurrentHue

namespace CurrentSaturation {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace CurrentSaturation

namespace RemainingTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace RemainingTime

namespace CurrentX {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace CurrentX

namespace CurrentY {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace CurrentY

namespace DriftCompensation {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::ColorControl::DriftCompensationEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::ColorControl::DriftCompensationEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::ColorControl::DriftCompensationEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace DriftCompensation

namespace CompensationText {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, 254);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, 254,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, 254);
}

} // namespace CompensationText

namespace ColorTemperatureMireds {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorTemperatureMireds

namespace ColorMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::ColorControl::ColorModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::ColorControl::ColorModeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::ColorControl::ColorModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorMode

namespace Options {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ColorControl::OptionsBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::ColorControl::OptionsBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::ColorControl::OptionsBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Options

namespace NumberOfPrimaries {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NumberOfPrimaries

namespace Primary1X {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary1X

namespace Primary1Y {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary1Y

namespace Primary1Intensity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Primary1Intensity

namespace Primary2X {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary2X

namespace Primary2Y {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary2Y

namespace Primary2Intensity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Primary2Intensity

namespace Primary3X {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary3X

namespace Primary3Y {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary3Y

namespace Primary3Intensity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Primary3Intensity

namespace Primary4X {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary4X

namespace Primary4Y {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary4Y

namespace Primary4Intensity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Primary4Intensity

namespace Primary5X {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary5X

namespace Primary5Y {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary5Y

namespace Primary5Intensity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Primary5Intensity

namespace Primary6X {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary6X

namespace Primary6Y {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace Primary6Y

namespace Primary6Intensity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Primary6Intensity

namespace WhitePointX {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace WhitePointX

namespace WhitePointY {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace WhitePointY

namespace ColorPointRX {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorPointRX

namespace ColorPointRY {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorPointRY

namespace ColorPointRIntensity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace ColorPointRIntensity

namespace ColorPointGX {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorPointGX

namespace ColorPointGY {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorPointGY

namespace ColorPointGIntensity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace ColorPointGIntensity

namespace ColorPointBX {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorPointBX

namespace ColorPointBY {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorPointBY

namespace ColorPointBIntensity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace ColorPointBIntensity

namespace EnhancedCurrentHue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace EnhancedCurrentHue

namespace EnhancedColorMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::ColorControl::EnhancedColorModeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::ColorControl::EnhancedColorModeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::ColorControl::EnhancedColorModeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace EnhancedColorMode

namespace ColorLoopActive {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorLoopActive

namespace ColorLoopDirection {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorLoopDirection

namespace ColorLoopTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorLoopTime

namespace ColorLoopStartEnhancedHue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorLoopStartEnhancedHue

namespace ColorLoopStoredEnhancedHue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorLoopStoredEnhancedHue

namespace ColorCapabilities {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ColorControl::ColorCapabilitiesBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ColorControl::ColorCapabilitiesBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ColorControl::ColorCapabilitiesBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorCapabilities

namespace ColorTempPhysicalMinMireds {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorTempPhysicalMinMireds

namespace ColorTempPhysicalMaxMireds {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ColorTempPhysicalMaxMireds

namespace CoupleColorTempToLevelMinMireds {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace CoupleColorTempToLevelMinMireds

namespace StartUpColorTemperatureMireds {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StartUpColorTemperatureMireds

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ColorControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ColorControl

namespace BallastConfiguration {
namespace Attributes {

namespace PhysicalMinLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

} // namespace PhysicalMinLevel

namespace PhysicalMaxLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

} // namespace PhysicalMaxLevel

namespace BallastStatus {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BallastConfiguration::BallastStatusBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BallastConfiguration::BallastStatusBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BallastConfiguration::BallastStatusBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

} // namespace BallastStatus

namespace MinLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

} // namespace MinLevel

namespace MaxLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

} // namespace MaxLevel

namespace IntrinsicBallastFactor {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace IntrinsicBallastFactor

namespace BallastFactorAdjustment {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace BallastFactorAdjustment

namespace LampQuantity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

} // namespace LampQuantity

namespace LampType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value, 16);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value, 16,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value, 16);
}

} // namespace LampType

namespace LampManufacturer {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value, 16);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value, 16,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value, 16);
}

} // namespace LampManufacturer

namespace LampRatedHours {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LampRatedHours

namespace LampBurnHours {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LampBurnHours

namespace LampAlarmMode {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BallastConfiguration::LampAlarmModeBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BallastConfiguration::LampAlarmModeBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::BallastConfiguration::LampAlarmModeBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

} // namespace LampAlarmMode

namespace LampBurnHoursTripPoint {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LampBurnHoursTripPoint

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::BallastConfiguration::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace BallastConfiguration

namespace IlluminanceMeasurement {
namespace Attributes {

namespace MeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxMeasuredValue

namespace Tolerance {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

} // namespace Tolerance

namespace LightSensorType {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, DataModel::Nullable<chip::app::Clusters::IlluminanceMeasurement::LightSensorTypeEnum> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::IlluminanceMeasurement::LightSensorTypeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::IlluminanceMeasurement::LightSensorTypeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::app::Clusters::IlluminanceMeasurement::LightSensorTypeEnum> & value,
    MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::app::Clusters::IlluminanceMeasurement::LightSensorTypeEnum> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace LightSensorType

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::IlluminanceMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace IlluminanceMeasurement

namespace TemperatureMeasurement {
namespace Attributes {

namespace MeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxMeasuredValue

namespace Tolerance {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value);
}

} // namespace Tolerance

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TemperatureMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace TemperatureMeasurement

namespace PressureMeasurement {
namespace Attributes {

namespace MeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxMeasuredValue

namespace Tolerance {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

} // namespace Tolerance

namespace ScaledValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace ScaledValue

namespace MinScaledValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinScaledValue

namespace MaxScaledValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxScaledValue

namespace ScaledTolerance {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

} // namespace ScaledTolerance

namespace Scale {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

} // namespace Scale

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::PressureMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace PressureMeasurement

namespace FlowMeasurement {
namespace Attributes {

namespace MeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxMeasuredValue

namespace Tolerance {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value);
}

} // namespace Tolerance

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FlowMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace FlowMeasurement

namespace RelativeHumidityMeasurement {
namespace Attributes {

namespace MeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id),
                                      GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace MaxMeasuredValue

namespace Tolerance {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value);
}

} // namespace Tolerance

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RelativeHumidityMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace RelativeHumidityMeasurement

namespace OccupancySensing {
namespace Attributes {

namespace Occupancy {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancyBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancyBitmap> value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancyBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace Occupancy

namespace OccupancySensorType {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::OccupancySensing::OccupancySensorTypeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::OccupancySensing::OccupancySensorTypeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::OccupancySensing::OccupancySensorTypeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace OccupancySensorType

namespace OccupancySensorTypeBitmap {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancySensorTypeBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancySensorTypeBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancySensorTypeBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace OccupancySensorTypeBitmap

namespace PIRUnoccupiedToOccupiedDelay {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace PIRUnoccupiedToOccupiedDelay

namespace PIRUnoccupiedToOccupiedThreshold {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace PIRUnoccupiedToOccupiedThreshold

namespace UltrasonicUnoccupiedToOccupiedDelay {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace UltrasonicUnoccupiedToOccupiedDelay

namespace UltrasonicUnoccupiedToOccupiedThreshold {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace UltrasonicUnoccupiedToOccupiedThreshold

namespace PhysicalContactUnoccupiedToOccupiedDelay {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace PhysicalContactUnoccupiedToOccupiedDelay

namespace PhysicalContactUnoccupiedToOccupiedThreshold {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace PhysicalContactUnoccupiedToOccupiedThreshold

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OccupancySensing::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace OccupancySensing

namespace CarbonMonoxideConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CarbonMonoxideConcentrationMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CarbonMonoxideConcentrationMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CarbonMonoxideConcentrationMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace CarbonMonoxideConcentrationMeasurement

namespace CarbonDioxideConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CarbonDioxideConcentrationMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CarbonDioxideConcentrationMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CarbonDioxideConcentrationMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace CarbonDioxideConcentrationMeasurement

namespace NitrogenDioxideConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::NitrogenDioxideConcentrationMeasurement::Id, Id),
                                 *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NitrogenDioxideConcentrationMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::NitrogenDioxideConcentrationMeasurement::Id, Id),
                                  value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace NitrogenDioxideConcentrationMeasurement

namespace OzoneConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::OzoneConcentrationMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OzoneConcentrationMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::OzoneConcentrationMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace OzoneConcentrationMeasurement

namespace Pm25ConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Pm25ConcentrationMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Pm25ConcentrationMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Pm25ConcentrationMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Pm25ConcentrationMeasurement

namespace FormaldehydeConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FormaldehydeConcentrationMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FormaldehydeConcentrationMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FormaldehydeConcentrationMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace FormaldehydeConcentrationMeasurement

namespace Pm1ConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Pm1ConcentrationMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Pm1ConcentrationMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Pm1ConcentrationMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Pm1ConcentrationMeasurement

namespace Pm10ConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Pm10ConcentrationMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Pm10ConcentrationMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Pm10ConcentrationMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Pm10ConcentrationMeasurement

namespace TotalVolatileOrganicCompoundsConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(
        ConcreteAttributePath(endpoint, Clusters::TotalVolatileOrganicCompoundsConcentrationMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(
        ConcreteAttributePath(endpoint, Clusters::TotalVolatileOrganicCompoundsConcentrationMeasurement::Id, Id), value,
        GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(
        ConcreteAttributePath(endpoint, Clusters::TotalVolatileOrganicCompoundsConcentrationMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace TotalVolatileOrganicCompoundsConcentrationMeasurement

namespace RadonConcentrationMeasurement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::RadonConcentrationMeasurement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RadonConcentrationMeasurement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::RadonConcentrationMeasurement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace RadonConcentrationMeasurement

namespace WiFiNetworkManagement {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkManagement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WiFiNetworkManagement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace WiFiNetworkManagement

namespace ThreadBorderRouterManagement {
namespace Attributes {

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadBorderRouterManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadBorderRouterManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadBorderRouterManagement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ThreadBorderRouterManagement

namespace ThreadNetworkDirectory {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDirectory::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDirectory::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDirectory::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDirectory::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDirectory::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ThreadNetworkDirectory::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ThreadNetworkDirectory

namespace WakeOnLan {
namespace Attributes {

namespace MACAddress {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value, 12);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value, 12, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value, 12);
}

} // namespace MACAddress

namespace LinkLocalAddress {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableByteSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value, 16);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value, 16, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value, 16);
}

} // namespace LinkLocalAddress

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WakeOnLan::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace WakeOnLan

namespace Channel {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Channel::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Channel::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Channel::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Channel::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Channel::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Channel::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Channel

namespace TargetNavigator {
namespace Attributes {

namespace CurrentTarget {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TargetNavigator::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TargetNavigator::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TargetNavigator::Id, Id), value);
}

} // namespace CurrentTarget

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TargetNavigator::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TargetNavigator::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TargetNavigator::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::TargetNavigator::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TargetNavigator::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::TargetNavigator::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace TargetNavigator

namespace MediaPlayback {
namespace Attributes {

namespace CurrentState {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::MediaPlayback::PlaybackStateEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::MediaPlayback::PlaybackStateEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::MediaPlayback::PlaybackStateEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

} // namespace CurrentState

namespace StartTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace StartTime

namespace Duration {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace Duration

namespace PlaybackSpeed {

Protocols::InteractionModel::Status Get(EndpointId endpoint, float * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, float value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, float value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

} // namespace PlaybackSpeed

namespace SeekRangeEnd {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace SeekRangeEnd

namespace SeekRangeStart {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace SeekRangeStart

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaPlayback::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace MediaPlayback

namespace MediaInput {
namespace Attributes {

namespace CurrentInput {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaInput::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaInput::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaInput::Id, Id), value);
}

} // namespace CurrentInput

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaInput::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaInput::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaInput::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::MediaInput::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaInput::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::MediaInput::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace MediaInput

namespace LowPower {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LowPower::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LowPower::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LowPower::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::LowPower::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LowPower::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::LowPower::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace LowPower

namespace KeypadInput {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::KeypadInput::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::KeypadInput::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::KeypadInput::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::KeypadInput::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::KeypadInput::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::KeypadInput::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace KeypadInput

namespace ContentLauncher {
namespace Attributes {

namespace SupportedStreamingProtocols {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ContentLauncher::SupportedProtocolsBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentLauncher::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ContentLauncher::SupportedProtocolsBitmap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentLauncher::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::ContentLauncher::SupportedProtocolsBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentLauncher::Id, Id), value);
}

} // namespace SupportedStreamingProtocols

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentLauncher::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentLauncher::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentLauncher::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentLauncher::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentLauncher::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentLauncher::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ContentLauncher

namespace AudioOutput {
namespace Attributes {

namespace CurrentOutput {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::AudioOutput::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AudioOutput::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AudioOutput::Id, Id), value);
}

} // namespace CurrentOutput

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::AudioOutput::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AudioOutput::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AudioOutput::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::AudioOutput::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AudioOutput::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AudioOutput::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace AudioOutput

namespace ApplicationLauncher {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationLauncher::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationLauncher::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationLauncher::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationLauncher::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationLauncher::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationLauncher::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ApplicationLauncher

namespace ApplicationBasic {
namespace Attributes {

namespace VendorName {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value, 32);
}

} // namespace VendorName

namespace VendorID {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::VendorId * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::VendorId value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::VendorId value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value);
}

} // namespace VendorID

namespace ApplicationName {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value, 256);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value, 256,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value, 256);
}

} // namespace ApplicationName

namespace ProductID {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value);
}

} // namespace ProductID

namespace Status {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value);
}

} // namespace Status

namespace ApplicationVersion {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value, 32);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value, 32,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value, 32);
}

} // namespace ApplicationVersion

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ApplicationBasic::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ApplicationBasic

namespace AccountLogin {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::AccountLogin::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AccountLogin::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AccountLogin::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::AccountLogin::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AccountLogin::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::AccountLogin::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace AccountLogin

namespace ContentControl {
namespace Attributes {

namespace Enabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value);
}

} // namespace Enabled

namespace OnDemandRatingThreshold {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value, 8);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value, 8,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value, 8);
}

} // namespace OnDemandRatingThreshold

namespace ScheduledContentRatingThreshold {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value, 8);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value, 8,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value, 8);
}

} // namespace ScheduledContentRatingThreshold

namespace ScreenDailyTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value);
}

} // namespace ScreenDailyTime

namespace RemainingScreenTime {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value);
}

} // namespace RemainingScreenTime

namespace BlockUnrated {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value);
}

} // namespace BlockUnrated

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ContentControl

namespace ContentAppObserver {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentAppObserver::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentAppObserver::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentAppObserver::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ContentAppObserver::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentAppObserver::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ContentAppObserver::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ContentAppObserver

namespace ZoneManagement {
namespace Attributes {

namespace Sensitivity {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ZoneManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ZoneManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ZoneManagement::Id, Id), value);
}

} // namespace Sensitivity

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ZoneManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ZoneManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ZoneManagement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::ZoneManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ZoneManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::ZoneManagement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace ZoneManagement

namespace CameraAvStreamManagement {
namespace Attributes {

namespace MaxConcurrentVideoEncoders {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace MaxConcurrentVideoEncoders

namespace MaxEncodedPixelRate {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace MaxEncodedPixelRate

namespace NightVisionCapable {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace NightVisionCapable

namespace MaxContentBufferSize {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace MaxContentBufferSize

namespace TwoWayTalkSupport {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::CameraAvStreamManagement::TwoWayTalkSupportTypeEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::CameraAvStreamManagement::TwoWayTalkSupportTypeEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        chip::app::Clusters::CameraAvStreamManagement::TwoWayTalkSupportTypeEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace TwoWayTalkSupport

namespace MaxNetworkBandwidth {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace MaxNetworkBandwidth

namespace CurrentFrameRate {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace CurrentFrameRate

namespace HDRModeEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace HDRModeEnabled

namespace SoftRecordingPrivacyModeEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace SoftRecordingPrivacyModeEnabled

namespace SoftLivestreamPrivacyModeEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace SoftLivestreamPrivacyModeEnabled

namespace HardPrivacyModeOn {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace HardPrivacyModeOn

namespace NightVision {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::CameraAvStreamManagement::TriStateAutoEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::CameraAvStreamManagement::TriStateAutoEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::CameraAvStreamManagement::TriStateAutoEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace NightVision

namespace NightVisionIllum {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::app::Clusters::CameraAvStreamManagement::TriStateAutoEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::CameraAvStreamManagement::TriStateAutoEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::CameraAvStreamManagement::TriStateAutoEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace NightVisionIllum

namespace SpeakerMuted {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace SpeakerMuted

namespace SpeakerVolumeLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace SpeakerVolumeLevel

namespace SpeakerMaxLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace SpeakerMaxLevel

namespace SpeakerMinLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace SpeakerMinLevel

namespace MicrophoneMuted {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace MicrophoneMuted

namespace MicrophoneVolumeLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace MicrophoneVolumeLevel

namespace MicrophoneMaxLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace MicrophoneMaxLevel

namespace MicrophoneMinLevel {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace MicrophoneMinLevel

namespace MicrophoneAGCEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace MicrophoneAGCEnabled

namespace ImageRotation {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace ImageRotation

namespace ImageFlipHorizontal {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace ImageFlipHorizontal

namespace ImageFlipVertical {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace ImageFlipVertical

namespace LocalVideoRecordingEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace LocalVideoRecordingEnabled

namespace LocalSnapshotRecordingEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace LocalSnapshotRecordingEnabled

namespace StatusLightEnabled {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace StatusLightEnabled

namespace StatusLightBrightness {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Globals::ThreeLevelAutoEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Globals::ThreeLevelAutoEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Globals::ThreeLevelAutoEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace StatusLightBrightness

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CameraAvStreamManagement::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace CameraAvStreamManagement

namespace WebRTCTransportProvider {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportProvider::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportProvider::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportProvider::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportProvider::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportProvider::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportProvider::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace WebRTCTransportProvider

namespace WebRTCTransportRequestor {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportRequestor::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportRequestor::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportRequestor::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportRequestor::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportRequestor::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::WebRTCTransportRequestor::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace WebRTCTransportRequestor

namespace Chime {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Chime::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Chime::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Chime::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::Chime::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Chime::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::Chime::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace Chime

namespace EcosystemInformation {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EcosystemInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EcosystemInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EcosystemInformation::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::EcosystemInformation::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EcosystemInformation::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::EcosystemInformation::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace EcosystemInformation

namespace CommissionerControl {
namespace Attributes {

namespace SupportedDeviceCategories {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, chip::BitMask<chip::app::Clusters::CommissionerControl::SupportedDeviceCategoryBitmap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CommissionerControl::Id, Id), *value);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::CommissionerControl::SupportedDeviceCategoryBitmap> value,
    MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CommissionerControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::CommissionerControl::SupportedDeviceCategoryBitmap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CommissionerControl::Id, Id), value);
}

} // namespace SupportedDeviceCategories

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CommissionerControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CommissionerControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CommissionerControl::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::CommissionerControl::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CommissionerControl::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::CommissionerControl::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace CommissionerControl

namespace UnitTesting {
namespace Attributes {

namespace Boolean {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Boolean

namespace Bitmap8 {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Bitmap8

namespace Bitmap16 {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Bitmap16

namespace Bitmap32 {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Bitmap32

namespace Bitmap64 {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap> * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Bitmap64

namespace Int8u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int8u

namespace Int16u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int16u

namespace Int24u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int24u

namespace Int32u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int32u

namespace Int40u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int40u

namespace Int48u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int48u

namespace Int56u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int56u

namespace Int64u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int64u

namespace Int8s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int8s

namespace Int16s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int16s

namespace Int24s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int24s

namespace Int32s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int32s

namespace Int40s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int40s

namespace Int48s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int48s

namespace Int56s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int56s

namespace Int64s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Int64s

namespace Enum8 {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Enum8

namespace Enum16 {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Enum16

namespace FloatSingle {

Protocols::InteractionModel::Status Get(EndpointId endpoint, float * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, float value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, float value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace FloatSingle

namespace FloatDouble {

Protocols::InteractionModel::Status Get(EndpointId endpoint, double * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, double value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, double value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace FloatDouble

namespace OctetString {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableByteSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10);
}

} // namespace OctetString

namespace LongOctetString {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableByteSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 1000);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 1000,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 1000);
}

} // namespace LongOctetString

namespace CharString {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10);
}

} // namespace CharString

namespace LongCharString {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::MutableCharSpan & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 1000);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 1000,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 1000);
}

} // namespace LongCharString

namespace EpochUs {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint64_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace EpochUs

namespace EpochS {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace EpochS

namespace VendorId {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::VendorId * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::VendorId value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::VendorId value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace VendorId

namespace EnumAttr {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::UnitTesting::SimpleEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::UnitTesting::SimpleEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::UnitTesting::SimpleEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace EnumAttr

namespace RangeRestrictedInt8u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace RangeRestrictedInt8u

namespace RangeRestrictedInt8s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace RangeRestrictedInt8s

namespace RangeRestrictedInt16u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace RangeRestrictedInt16u

namespace RangeRestrictedInt16s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, int16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace RangeRestrictedInt16s

namespace TimedWriteBoolean {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace TimedWriteBoolean

namespace GlobalEnum {

Protocols::InteractionModel::Status Get(EndpointId endpoint, chip::app::Clusters::Globals::TestGlobalEnum * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Globals::TestGlobalEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Globals::TestGlobalEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace GlobalEnum

namespace Unsupported {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace Unsupported

namespace ReadFailureCode {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace ReadFailureCode

namespace FailureInt32U {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace FailureInt32U

namespace NullableBoolean {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<bool> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<bool> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<bool> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableBoolean

namespace NullableBitmap8 {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap>> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap>> & value,
    MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap>> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableBitmap8

namespace NullableBitmap16 {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap>> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap>> & value,
    MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap>> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableBitmap16

namespace NullableBitmap32 {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap>> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap>> & value,
    MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap>> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableBitmap32

namespace NullableBitmap64 {

Protocols::InteractionModel::Status
Get(EndpointId endpoint, DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap>> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap> value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap> value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap>> & value,
    MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status
Set(EndpointId endpoint,
    const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap>> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableBitmap64

namespace NullableInt8u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt8u

namespace NullableInt16u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt16u

namespace NullableInt24u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt24u

namespace NullableInt32u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt32u

namespace NullableInt40u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt40u

namespace NullableInt48u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt48u

namespace NullableInt56u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt56u

namespace NullableInt64u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt64u

namespace NullableInt8s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt8s

namespace NullableInt16s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt16s

namespace NullableInt24s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt24s

namespace NullableInt32s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int32_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int32_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int32_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt32s

namespace NullableInt40s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt40s

namespace NullableInt48s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt48s

namespace NullableInt56s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt56s

namespace NullableInt64s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int64_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int64_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableInt64s

namespace NullableEnum8 {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableEnum8

namespace NullableEnum16 {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableEnum16

namespace NullableFloatSingle {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<float> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, float value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, float value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<float> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<float> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableFloatSingle

namespace NullableFloatDouble {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<double> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, double value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, double value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<double> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<double> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableFloatDouble

namespace NullableOctetString {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::MutableByteSpan> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::ByteSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::ByteSpan> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::ByteSpan> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableOctetString

namespace NullableCharString {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<chip::MutableCharSpan> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::CharSpan value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, 10);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::CharSpan> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<chip::CharSpan> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableCharString

namespace NullableEnumAttr {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        DataModel::Nullable<chip::app::Clusters::UnitTesting::SimpleEnum> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::UnitTesting::SimpleEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::UnitTesting::SimpleEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::UnitTesting::SimpleEnum> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::UnitTesting::SimpleEnum> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableEnumAttr

namespace NullableRangeRestrictedInt8u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableRangeRestrictedInt8u

namespace NullableRangeRestrictedInt8s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int8_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int8_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int8_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableRangeRestrictedInt8s

namespace NullableRangeRestrictedInt16u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<uint16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableRangeRestrictedInt16u

namespace NullableRangeRestrictedInt16s {

Protocols::InteractionModel::Status Get(EndpointId endpoint, DataModel::Nullable<int16_t> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, int16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableRangeRestrictedInt16s

namespace WriteOnlyInt8u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace WriteOnlyInt8u

namespace NullableGlobalEnum {

Protocols::InteractionModel::Status Get(EndpointId endpoint,
                                        DataModel::Nullable<chip::app::Clusters::Globals::TestGlobalEnum> & value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Globals::TestGlobalEnum value,
                                        MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, chip::app::Clusters::Globals::TestGlobalEnum value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::Globals::TestGlobalEnum> & value,
                                        MarkAttributeDirty markDirty)
{
    if (value.IsNull())
    {
        return SetNull(endpoint, markDirty);
    }

    return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint,
                                        const chip::app::DataModel::Nullable<chip::app::Clusters::Globals::TestGlobalEnum> & value)
{
    if (value.IsNull())
    {
        return SetNull(endpoint);
    }

    return Set(endpoint, value.Value());
}

} // namespace NullableGlobalEnum

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace ClusterRevision

namespace MeiInt8u {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint8_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint8_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::UnitTesting::Id, Id), value);
}

} // namespace MeiInt8u

} // namespace Attributes
} // namespace UnitTesting

namespace FaultInjection {
namespace Attributes {

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FaultInjection::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FaultInjection::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FaultInjection::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::FaultInjection::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FaultInjection::Id, Id), value,
                                  GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::FaultInjection::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace FaultInjection

namespace SampleMei {
namespace Attributes {

namespace FlipFlop {

Protocols::InteractionModel::Status Get(EndpointId endpoint, bool * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SampleMei::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SampleMei::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, bool value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SampleMei::Id, Id), value);
}

} // namespace FlipFlop

namespace FeatureMap {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint32_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SampleMei::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SampleMei::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint32_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SampleMei::Id, Id), value);
}

} // namespace FeatureMap

namespace ClusterRevision {

Protocols::InteractionModel::Status Get(EndpointId endpoint, uint16_t * value)
{
    return InternalReadAttribute(ConcreteAttributePath(endpoint, Clusters::SampleMei::Id, Id), *value);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value, MarkAttributeDirty markDirty)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SampleMei::Id, Id), value, GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, uint16_t value)
{
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, Clusters::SampleMei::Id, Id), value);
}

} // namespace ClusterRevision

} // namespace Attributes
} // namespace SampleMei

} // namespace Clusters
} // namespace app
} // namespace chip
