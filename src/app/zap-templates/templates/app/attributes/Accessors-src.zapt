{{>header}}

/**
 *  @file
 *    This file contains definitions for accessors around clusters attributes.
 */

#include <app-common/zap-generated/attributes/Accessors.h>

#include <app-common/zap-generated/attribute-type.h>
#include <app-common/zap-generated/ids/Attributes.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app/InternalAttributeOperations.h>
#include <app/InteractionModelEngine.h>
#include <app/util/attribute-storage-null-handling.h>
#include <app/util/attribute-table.h>
#include <app/util/odd-sized-integers.h>
#include <lib/core/CHIPEncoding.h>
#include <lib/support/logging/CHIPLogging.h>

namespace {

std::optional<bool> GetMarkDirty(chip::app::MarkAttributeDirty markDirty)
{
    if (markDirty == chip::app::MarkAttributeDirty::kYes)
    {
        return std::make_optional(true);
    }
    if (markDirty == chip::app::MarkAttributeDirty::kNo)
    {
        return std::make_optional(false);
    }
    return std::nullopt;
}

}

namespace chip {
namespace app {
namespace Clusters {

{{#zcl_clusters}}
{{#zcl_attributes_server}}
{{#first}}
namespace {{asUpperCamelCase parent.label}} {
namespace Attributes {

{{/first}}
{{#unless (isStrEqual storagePolicy "attributeAccessInterface")}}
{{#if_is_struct type}}
#error Attribute "{{name}}" in cluster "{{../name}}" is struct-typed and must be added to the attributeAccessInterfaceAttributes object in src/app/zap-templates/zcl/zcl.json and src/app/zap-templates/zcl/zcl-with-test-extensions.json
{{/if_is_struct}}
namespace {{asUpperCamelCase label}} {

{{#*inline "clusterId"}}Clusters::{{asUpperCamelCase parent.label}}::Id{{/inline}}
{{#*inline "sizingBytes"}}{{#if (isShortString type)}}1{{else}}2{{/if}}{{/inline}}

Protocols::InteractionModel::Status Get(EndpointId endpoint, {{accessorGetterType this}} value)
{
    {{~#if (isString type)}}
    return InternalReadAttribute(ConcreteAttributePath(endpoint, {{>clusterId}}, Id), value, {{maxLength}});
    {{else}}
    {{~#*inline "decodeType"}}{{zapTypeToEncodableClusterObjectType type ns=parent.name forceNotNullable=true forceNotOptional=true}}{{/inline}}
    {{#if isNullable}}
    return InternalReadAttribute(ConcreteAttributePath(endpoint, {{>clusterId}}, Id), value);
    {{else}}
    return InternalReadAttribute(ConcreteAttributePath(endpoint, {{>clusterId}}, Id), *value);
    {{/if}}
    {{/if}}
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, {{zapTypeToEncodableClusterObjectType type ns=parent.name forceNotNullable=true forceNotOptional=true}} value, MarkAttributeDirty markDirty)
{
    {{~#if (isString type)}}
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, {{>clusterId}}, Id), value, {{maxLength}}, GetMarkDirty(markDirty));
    {{else}}
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, {{>clusterId}}, Id), value, GetMarkDirty(markDirty));
    {{/if}}
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, {{zapTypeToEncodableClusterObjectType type ns=parent.name forceNotNullable=true forceNotOptional=true}} value)
{
    {{~#if (isString type)}}
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, {{>clusterId}}, Id), value, {{maxLength}});
    {{else}}
    return InternalWriteAttribute(ConcreteAttributePath(endpoint, {{>clusterId}}, Id), value);
    {{/if}}
}
{{#if isNullable}}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint, MarkAttributeDirty markDirty)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, {{>clusterId}}, Id), GetMarkDirty(markDirty));
}

Protocols::InteractionModel::Status SetNull(EndpointId endpoint)
{
    return InternalWriteAttributeNull(ConcreteAttributePath(endpoint, {{>clusterId}}, Id));
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, {{zapTypeToEncodableClusterObjectType type ns=parent.name isArgument=true forceNotOptional=true}} value, MarkAttributeDirty markDirty)
{
  if (value.IsNull()) {
    return SetNull(endpoint, markDirty);
  }

  return Set(endpoint, value.Value(), markDirty);
}

Protocols::InteractionModel::Status Set(EndpointId endpoint, {{zapTypeToEncodableClusterObjectType type ns=parent.name isArgument=true forceNotOptional=true}} value)
{
  if (value.IsNull()) {
    return SetNull(endpoint);
  }

  return Set(endpoint, value.Value());
}
{{/if}}

} // namespace {{asUpperCamelCase label}}

{{/unless}}
{{#last}}
} // namespace Attributes
} // {{asUpperCamelCase parent.label}}

{{/last}}
{{/zcl_attributes_server}}
{{/zcl_clusters}}

} // Clusters
} // app
} // chip
